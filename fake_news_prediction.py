# -*- coding: utf-8 -*-
"""Fake News Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sO210FIIoTDu1jy5HChmEDN_WxvZfkBg

Import Libraries
"""

import pandas as pd
import numpy as np
import re
import csv # Import the csv module
from nltk.corpus import stopwords # Words that does not add much values to the paragraph (the, and, a ...), we need to remove them
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer # Convert text into feature vectors
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

# Printing the stopwords in english
print(stopwords.words('english'))

"""Data preprocessing

"""

# Load dataset in pandas dataframe

news_dataset = pd.read_csv("/content/train.csv", on_bad_lines='warn', encoding='latin1', engine='python')

# Check
news_dataset.shape

# Count the empty values
np.sum(news_dataset.isnull())

# Replace the null values with Empty sting
news_dataset.fillna('')
print(news_dataset)

# Merging author name and title
news_dataset['content'] = news_dataset['author'] + ' ' + news_dataset['title']
print(news_dataset['content'])

# Separate the data (content) and the Label

X = news_dataset.drop(columns='label', axis=1)
Y = news_dataset['label']
print(X)
print(Y)

"""Stemming : Reducing a word to its root word

example: actor, actress, acting ---> act


"""

porter_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]', ' ', content) # [^a-zA-Z] --> removing everything that is not alphabet from my content and everything that is removed is replaced by space
  stemmed_content = stemmed_content.lower() # Convert all the letters in lower
  stemmed_content = stemmed_content.split() #
  stemmed_content = [porter_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')] # We are stemming each word of the content that it is not a stopword
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

# Apply the stemming function to the content column
news_dataset['content'] = news_dataset['content'].apply(stemming)
print(news_dataset['content'])

# Separating the data and label

X = news_dataset['content'].values
Y = news_dataset['label'].values

# Converting textual data to numerical data
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(X) # Convert text into feature vectors
print(X)

"""Splitting the dataset into train and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)
print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

"""Train the model"""

model = LogisticRegression()
model.fit(X_train, Y_train)

# Accurancy of the training data
X_training_prediction = model.predict(X_train)
X_training_accurancy = accuracy_score(X_training_prediction, Y_train)
print('Accuracy score of the training data : ', X_training_accurancy)

# Accurancy of test data

X_test_prediction = model.predict(X_test)
X_test_accurancy = accuracy_score(X_test_prediction, Y_test)
print('Accuracy score of the test data : ', X_test_accurancy)

"""Make a prediction System"""

X_new = X_test[2]
prediction = model.predict(X_new)
print(prediction)

if (prediction[0] == 0):
  print('The news is Real')
else:
  print('The news is Fake')